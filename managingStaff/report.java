/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package managingStaff;

import deliveryStaff.manageTasks;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import orders.allOrdersTable;
import orders.checkInOrders;

/**
 *
 * @author bidha
 */
public class report extends javax.swing.JFrame {
String COUNT;
String file1="C:\\Users\\bidha\\OneDrive\\Documents\\NetBeansProjects\\hw1\\src\\main\\java\\managingStaff\\managers.txt";
String file2="C:\\Users\\bidha\\OneDrive\\Documents\\NetBeansProjects\\hw1\\src\\main\\java\\deliveryStaff\\deliveryboys.txt";
String file3="C:\\Users\\bidha\\OneDrive\\Documents\\NetBeansProjects\\hw1\\src\\main\\java\\managingStaff\\feedbacks.txt";
String file4="C:\\Users\\bidha\\OneDrive\\Documents\\NetBeansProjects\\hw1\\src\\main\\java\\managingStaff\\deluser.txt";
String file5="C:\\Users\\bidha\\OneDrive\\Documents\\NetBeansProjects\\hw1\\src\\main\\java\\orders\\orderdetails.txt";
String file6="C:\\Users\\bidha\\OneDrive\\Documents\\NetBeansProjects\\hw1\\src\\main\\java\\managingStaff\\deletedorders.txt";
viewUser table=new viewUser();
allFeedbacks table1=new allFeedbacks();
tableForOrders table2=new tableForOrders();
    /**
     * Creates new form report
     * @throws java.io.IOException
     */
    public report() throws FileNotFoundException, IOException {
        initComponents();
      
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        back = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        managercount = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        deliverycount = new javax.swing.JTextField();
        todaybutton = new javax.swing.JToggleButton();
        monthbutton = new javax.swing.JToggleButton();
        yearbutton = new javax.swing.JToggleButton();
        jLabel8 = new javax.swing.JLabel();
        feedbacks = new javax.swing.JTextField();
        managersbutton = new javax.swing.JButton();
        deliverybuttons = new javax.swing.JButton();
        feedbacksbutton = new javax.swing.JButton();
        totalbutton = new javax.swing.JToggleButton();
        jLabel9 = new javax.swing.JLabel();
        userdelete = new javax.swing.JTextField();
        deleteduserbuttons = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        totalorders = new javax.swing.JTextField();
        delivered = new javax.swing.JTextField();
        deleted = new javax.swing.JTextField();
        orders = new javax.swing.JButton();
        totaldelivered = new javax.swing.JButton();
        cancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(20, 63, 107));

        jLabel4.setBackground(new java.awt.Color(255, 198, 0));
        jLabel4.setFont(new java.awt.Font("Poppins ExtraBold", 0, 35)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 198, 0));
        jLabel4.setText("REPORTS");

        back.setBackground(new java.awt.Color(235, 29, 54));
        back.setFont(new java.awt.Font("Poppins Medium", 0, 18)); // NOI18N
        back.setForeground(new java.awt.Color(255, 198, 0));
        back.setText("BACK");
        back.setAlignmentX(0.5F);
        back.setBorder(null);
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel6.setText("TOTAL MANAGERS ADDED:");

        managercount.setEditable(false);
        managercount.setBackground(new java.awt.Color(246, 245, 77));
        managercount.setFont(new java.awt.Font("Poppins Light", 1, 18)); // NOI18N
        managercount.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        managercount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managercountActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel7.setText("TOTAL DELIVERY STAFFS ADDED:");

        deliverycount.setEditable(false);
        deliverycount.setBackground(new java.awt.Color(246, 245, 77));
        deliverycount.setFont(new java.awt.Font("Poppins Light", 1, 18)); // NOI18N
        deliverycount.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        deliverycount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deliverycountActionPerformed(evt);
            }
        });

        todaybutton.setBackground(new java.awt.Color(255, 183, 43));
        buttonGroup1.add(todaybutton);
        todaybutton.setFont(new java.awt.Font("Poppins SemiBold", 0, 18)); // NOI18N
        todaybutton.setText("TODAY");
        todaybutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                todaybuttonActionPerformed(evt);
            }
        });

        monthbutton.setBackground(new java.awt.Color(255, 183, 43));
        buttonGroup1.add(monthbutton);
        monthbutton.setFont(new java.awt.Font("Poppins SemiBold", 0, 18)); // NOI18N
        monthbutton.setText("THIS MONTH");
        monthbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthbuttonActionPerformed(evt);
            }
        });

        yearbutton.setBackground(new java.awt.Color(255, 183, 43));
        buttonGroup1.add(yearbutton);
        yearbutton.setFont(new java.awt.Font("Poppins SemiBold", 0, 18)); // NOI18N
        yearbutton.setText("THIS YEAR");
        yearbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearbuttonActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel8.setText("TOTAL FEEDBACKS ADDED:");

        feedbacks.setEditable(false);
        feedbacks.setBackground(new java.awt.Color(246, 245, 77));
        feedbacks.setFont(new java.awt.Font("Poppins Light", 1, 18)); // NOI18N
        feedbacks.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        feedbacks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedbacksActionPerformed(evt);
            }
        });

        managersbutton.setBackground(new java.awt.Color(255, 183, 43));
        managersbutton.setFont(new java.awt.Font("Poppins SemiBold", 0, 18)); // NOI18N
        managersbutton.setText("VIEW MORE");
        managersbutton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        managersbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managersbuttonActionPerformed(evt);
            }
        });

        deliverybuttons.setBackground(new java.awt.Color(255, 183, 43));
        deliverybuttons.setFont(new java.awt.Font("Poppins SemiBold", 0, 18)); // NOI18N
        deliverybuttons.setText("VIEW MORE");
        deliverybuttons.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        deliverybuttons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deliverybuttonsActionPerformed(evt);
            }
        });

        feedbacksbutton.setBackground(new java.awt.Color(255, 183, 43));
        feedbacksbutton.setFont(new java.awt.Font("Poppins SemiBold", 0, 18)); // NOI18N
        feedbacksbutton.setText("VIEW MORE");
        feedbacksbutton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        feedbacksbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedbacksbuttonActionPerformed(evt);
            }
        });

        totalbutton.setBackground(new java.awt.Color(255, 183, 43));
        buttonGroup1.add(totalbutton);
        totalbutton.setFont(new java.awt.Font("Poppins SemiBold", 0, 18)); // NOI18N
        totalbutton.setText("TOTAL");
        totalbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalbuttonActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel9.setText("TOTAL USERS DELETED:");

        userdelete.setEditable(false);
        userdelete.setBackground(new java.awt.Color(246, 245, 77));
        userdelete.setFont(new java.awt.Font("Poppins Light", 1, 18)); // NOI18N
        userdelete.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        userdelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userdeleteActionPerformed(evt);
            }
        });

        deleteduserbuttons.setBackground(new java.awt.Color(255, 183, 43));
        deleteduserbuttons.setFont(new java.awt.Font("Poppins SemiBold", 0, 18)); // NOI18N
        deleteduserbuttons.setText("VIEW MORE");
        deleteduserbuttons.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        deleteduserbuttons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteduserbuttonsActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel10.setText("TOTAL ORDERS PLACED:");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel11.setText("TOTAL ORDERS DELIVERED:");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel12.setText("TOTAL ORDERS CANCELLED:");

        totalorders.setEditable(false);
        totalorders.setBackground(new java.awt.Color(246, 245, 77));
        totalorders.setFont(new java.awt.Font("Poppins Light", 1, 18)); // NOI18N
        totalorders.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        totalorders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalordersActionPerformed(evt);
            }
        });

        delivered.setEditable(false);
        delivered.setBackground(new java.awt.Color(246, 245, 77));
        delivered.setFont(new java.awt.Font("Poppins Light", 1, 18)); // NOI18N
        delivered.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        delivered.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deliveredActionPerformed(evt);
            }
        });

        deleted.setEditable(false);
        deleted.setBackground(new java.awt.Color(246, 245, 77));
        deleted.setFont(new java.awt.Font("Poppins Light", 1, 18)); // NOI18N
        deleted.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        deleted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletedActionPerformed(evt);
            }
        });

        orders.setBackground(new java.awt.Color(255, 183, 43));
        orders.setFont(new java.awt.Font("Poppins SemiBold", 0, 18)); // NOI18N
        orders.setText("VIEW MORE");
        orders.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        orders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordersActionPerformed(evt);
            }
        });

        totaldelivered.setBackground(new java.awt.Color(255, 183, 43));
        totaldelivered.setFont(new java.awt.Font("Poppins SemiBold", 0, 18)); // NOI18N
        totaldelivered.setText("VIEW MORE");
        totaldelivered.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        totaldelivered.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totaldeliveredActionPerformed(evt);
            }
        });

        cancel.setBackground(new java.awt.Color(255, 183, 43));
        cancel.setFont(new java.awt.Font("Poppins SemiBold", 0, 18)); // NOI18N
        cancel.setText("VIEW MORE");
        cancel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(314, 314, 314))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(343, 343, 343))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(totalbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)
                        .addComponent(todaybutton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(delivered, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(totaldelivered, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(deleted, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(managercount, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52)
                                .addComponent(managersbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(deliverycount, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(feedbacks, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(userdelete, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(totalorders, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(52, 52, 52)
                                        .addComponent(deliverybuttons, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(feedbacksbutton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(deleteduserbuttons, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(orders, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addContainerGap(64, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(monthbutton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(yearbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalbutton)
                    .addComponent(todaybutton)
                    .addComponent(monthbutton)
                    .addComponent(yearbutton))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(managercount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(managersbutton)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deliverycount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deliverybuttons))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(feedbacks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(feedbacksbutton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userdelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteduserbuttons))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(totalorders, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(orders)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(delivered, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(totaldelivered)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 76, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deleted, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cancel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new dashboardManagingStaff().setVisible(true);
    }//GEN-LAST:event_backActionPerformed

    private void managercountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managercountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_managercountActionPerformed

    private void deliverycountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deliverycountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deliverycountActionPerformed

    private void todaybuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_todaybuttonActionPerformed
    try {
        // TODO add your handling code here:
        today(file1,16,17,18);
        managercount.setText(COUNT);
        today(file2,16,17,18);
        deliverycount.setText(COUNT);
        today(file3,6,7,8);
        feedbacks.setText(COUNT);
        today(file4,16,17,18);
        userdelete.setText(COUNT);
        today(file5,3,2,1);
        totalorders.setText(COUNT);
        today(file5,3,2,1,"delivered");
        delivered.setText(COUNT);
        today(file6,3,2,1);
        deleted.setText(COUNT);
    } catch (IOException ex) {
        Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_todaybuttonActionPerformed

    private void monthbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthbuttonActionPerformed
        // TODO add your handling code here:
        try {
        // TODO add your handling code here:
        month(file1,17,18);
        managercount.setText(COUNT);
        month(file2,17,18);
        deliverycount.setText(COUNT);
        month(file3,7,8);
        feedbacks.setText(COUNT);
        month(file4,17,18);
        userdelete.setText(COUNT);
        month(file5,2,1);
        totalorders.setText(COUNT);
        month(file5,2,1,"delivered");
        delivered.setText(COUNT);
        month(file6,2,1);
        deleted.setText(COUNT);
    } catch (IOException ex) {
        Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_monthbuttonActionPerformed

    private void yearbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearbuttonActionPerformed
        // TODO add your handling code here:
        try {
        // TODO add your handling code here:
        year(file1,18);
        managercount.setText(COUNT);
        year(file2,18);
        deliverycount.setText(COUNT);
        year(file3,8);
        feedbacks.setText(COUNT);
        year(file4,18);
        userdelete.setText(COUNT);
        year(file5,1);
        totalorders.setText(COUNT);
        year(file5,1,"delivered");
        delivered.setText(COUNT);
        year(file6,1);
        deleted.setText(COUNT);
    } catch (IOException ex) {
        Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_yearbuttonActionPerformed

    private void feedbacksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedbacksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_feedbacksActionPerformed

    private void managersbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managersbuttonActionPerformed
        // TODO add your handling code here:
        
        if(todaybutton.isSelected()){
            
            try {
                setTableValues("dd",file1,16,table);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(monthbutton.isSelected()){
            try {
                setTableValues("MM",file1,17,table);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(yearbutton.isSelected()){
            try {
                setTableValues("yyyy",file1,18,table);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(totalbutton.isSelected()){
            table.setVisible(true);
            table.jToggleButton2.setVisible(false);
            table.jToggleButton1.setVisible(false);
            table.back.setVisible(false);
            table.close.setVisible(true);
            table.removerow();
            table.showmanagers();
        }
        
    
            
    }//GEN-LAST:event_managersbuttonActionPerformed

    private void totalbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalbuttonActionPerformed
        // TODO add your handling code here:
        try {
        // TODO add your handling code here:
        wholefile(file1);
        managercount.setText(COUNT);
        wholefile(file2);
        deliverycount.setText(COUNT);
        wholefile(file3);
        feedbacks.setText(COUNT);
        wholefile(file4);
        userdelete.setText(COUNT);
        wholefile(file5);
        totalorders.setText(COUNT);
        wholefile(file5,"delivered");
        delivered.setText(COUNT);
        wholefile(file6);
        deleted.setText(COUNT);
    } catch (IOException ex) {
        Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_totalbuttonActionPerformed

    private void userdeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userdeleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userdeleteActionPerformed

    private void feedbacksbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedbacksbuttonActionPerformed
        // TODO add your handling code here:
        if(totalbutton.isSelected()){
            table1.setVisible(true);
            table1.spec.enter.setVisible(false);
            table1.back.setVisible(false);
            table1.back1.setVisible(true);
        }
        else if(todaybutton.isSelected()){
            try {
                setTableValues("dd",file3,6,table1);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(monthbutton.isSelected()){
            try {
                setTableValues("MM",file3,7,table1);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(yearbutton.isSelected()){
            try {
                setTableValues("yyyy",file3,8,table1);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_feedbacksbuttonActionPerformed

    private void deliverybuttonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deliverybuttonsActionPerformed
        // TODO add your handling code here:
        if(todaybutton.isSelected()){
            try {
                setTableValues("dd",file2,16,table);
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(monthbutton.isSelected()){
            try {
                setTableValues("MM",file2,17,table);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(yearbutton.isSelected()){
            try {
                setTableValues("yyyy",file2,18,table);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(totalbutton.isSelected()){
            table.setVisible(true);
            table.jToggleButton2.setVisible(false);
            table.jToggleButton1.setVisible(false);
            table.back.setVisible(false);
            table.close.setVisible(true);
            table.removerow();
            table.showdelivery();
        }
        
    }//GEN-LAST:event_deliverybuttonsActionPerformed

    private void deleteduserbuttonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteduserbuttonsActionPerformed
        // TODO add your handling code here:
        if(todaybutton.isSelected()){
            try {
                setTableValues("dd",file4,16,table);
             
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(monthbutton.isSelected()){
            try {
                setTableValues("MM",file4,17,table);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(yearbutton.isSelected()){
            try {
                setTableValues("yyyy",file4,18,table);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(totalbutton.isSelected()){
            table.setVisible(true);
            table.jToggleButton2.setVisible(false);
            table.jToggleButton1.setVisible(false);
            table.back.setVisible(false);
            table.close.setVisible(true);
            table.removerow();
            table.deleteduser();
        }
       
    }//GEN-LAST:event_deleteduserbuttonsActionPerformed

    private void totalordersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalordersActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalordersActionPerformed

    private void deliveredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deliveredActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deliveredActionPerformed

    private void deletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deletedActionPerformed

    private void ordersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordersActionPerformed
        // TODO add your handling code here:
        if(todaybutton.isSelected()){
            try {
                setTableValues("dd",file5,3,table2);
             
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(monthbutton.isSelected()){
            try {
                setTableValues("MM",file5,2,table2);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(yearbutton.isSelected()){
            try {
                setTableValues("yyyy",file5,1,table2);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(totalbutton.isSelected()){
            FileReader fr;
            try {
                fr = new FileReader(file5);
                BufferedReader br = new BufferedReader(fr);
                DefaultTableModel model = (DefaultTableModel)table2.allordetable.getModel();
                Object[] lines = br.lines().toArray();
                for(int i = 0; i < lines.length; i++){
                String[] row = lines[i].toString().split("-|,");
                                  model.addRow(row);}
            
        br.close();
        fr.close();
        table2.setVisible(true);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        }
    }//GEN-LAST:event_ordersActionPerformed

    private void totaldeliveredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totaldeliveredActionPerformed
        // TODO add your handling code here:
        if(todaybutton.isSelected()){
            try {
                setTableValues("dd",file5,3,table2,"delivered");
             
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(monthbutton.isSelected()){
            try {
                setTableValues("MM",file5,2,table2,"delivered");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(yearbutton.isSelected()){
            try {
                setTableValues("yyyy",file5,1,table2,"delivered");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(totalbutton.isSelected()){
            FileReader fr;
            try {
                fr = new FileReader(file5);
                BufferedReader br = new BufferedReader(fr);
                DefaultTableModel model = (DefaultTableModel)table2.allordetable.getModel();
                Object[] lines = br.lines().toArray();
                for(int i = 0; i < lines.length; i++){
                String[] row = lines[i].toString().split("-|,");
                if(row[25].equals("delivered")){
                                  model.addRow(row);}
            
        br.close();
        fr.close();
        table2.setVisible(true);}
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        }
    }//GEN-LAST:event_totaldeliveredActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        // TODO add your handling code here:
        if(todaybutton.isSelected()){
            try {
                setTableValues("dd",file6,3,table2);
             
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(monthbutton.isSelected()){
            try {
                setTableValues("MM",file6,2,table2);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(yearbutton.isSelected()){
            try {
                setTableValues("yyyy",file6,1,table2);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(totalbutton.isSelected()){
            FileReader fr;
            try {
                fr = new FileReader(file6);
                BufferedReader br = new BufferedReader(fr);
                DefaultTableModel model = (DefaultTableModel)table2.allordetable.getModel();
                Object[] lines = br.lines().toArray();
                for(int i = 0; i < lines.length; i++){
                String[] row = lines[i].toString().split("-|,");
                                  model.addRow(row);}
            
        br.close();
        fr.close();
        table2.setVisible(true);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        }
    }//GEN-LAST:event_cancelActionPerformed
    public String wholefile(String s) throws FileNotFoundException, IOException{
        int t = 0;
        File file=new File(s);
        Scanner sc=new Scanner(file);
        while(sc.hasNextLine()){
            sc.nextLine();
            t++;
        }
        sc.close();
        COUNT=Integer.toString(t);
        return COUNT;
    }
    public String wholefile(String s,String keyword) throws FileNotFoundException, IOException{
        String line;
        int count = 0;
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy"); 
        Date date=new Date();
        String todaydate=formatter.format(date);
        File file=new File(s);
        FileInputStream fileInputStream=new FileInputStream(file);
        InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream);
        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
        while ((line = bufferedReader.readLine()) != null) {
            String countme[]=line.split(",|-");
            {
                if(countme[25].equals("delivered"))
                count++;
            }
            
        }
        bufferedReader.close();
        inputStreamReader.close();
        fileInputStream.close();
        COUNT=Integer.toString(count);
        return COUNT;
    }
    public String today(String u,int day,int month,int year) throws FileNotFoundException, IOException{
        String line;
        int count = 0;
        SimpleDateFormat formatter = new SimpleDateFormat("dd"); 
        Date date=new Date();
        String todaydate=formatter.format(date);
        SimpleDateFormat formatter1 = new SimpleDateFormat("MM");
        Date date1=new Date();
        String thismonth=formatter1.format(date1);
        SimpleDateFormat formatter2 = new SimpleDateFormat("yyyy");
        Date date2=new Date();
        String thisyear=formatter2.format(date2);
        File file=new File(u);
        FileInputStream fileInputStream=new FileInputStream(file);
        InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream);
        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
        while ((line = bufferedReader.readLine()) != null) {
            String countme[]=line.split(",|-");
            if (countme[day].equals(todaydate)&&countme[month].equals(thismonth)&&countme[year].equals(thisyear)){
                count++;
            }          
        }
        bufferedReader.close();
        inputStreamReader.close();
        fileInputStream.close();
        COUNT=Integer.toString(count);
        return COUNT;
    }
    public String today(String u,int day,int month,int year,String status) throws FileNotFoundException, IOException{
        String line;
        int count = 0;
        SimpleDateFormat formatter = new SimpleDateFormat("dd"); 
        Date date=new Date();
        String todaydate=formatter.format(date);
        SimpleDateFormat formatter1 = new SimpleDateFormat("MM");
        Date date1=new Date();
        String thismonth=formatter1.format(date1);
        SimpleDateFormat formatter2 = new SimpleDateFormat("yyyy");
        Date date2=new Date();
        String thisyear=formatter2.format(date2);
        File file=new File(u);
        FileInputStream fileInputStream=new FileInputStream(file);
        InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream);
        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
        while ((line = bufferedReader.readLine()) != null) {
            String countme[]=line.split(",|-");
            if (countme[day].equals(todaydate)&&countme[month].equals(thismonth)&&countme[year].equals(thisyear)){
                if(status.equals(countme[25]))
                count++;
            }          
        }
        bufferedReader.close();
        inputStreamReader.close();
        fileInputStream.close();
        COUNT=Integer.toString(count);
        return COUNT;
    }
    public String month(String u,int todate,int year) throws FileNotFoundException, IOException{
        String line;
        int count = 0;
        SimpleDateFormat formatter = new SimpleDateFormat("MM"); 
        Date date=new Date();
        String todaydate=formatter.format(date);
        SimpleDateFormat formatter2 = new SimpleDateFormat("yyyy");
        Date date2=new Date();
        String thisyear=formatter2.format(date2);
        File file=new File(u);
        FileInputStream fileInputStream=new FileInputStream(file);
        InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream);
        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
        while ((line = bufferedReader.readLine()) != null) {
            String countme[]=line.split(",|-");
            if (countme[todate].equals(todaydate)&&countme[year].equals(thisyear)){
                count++;
            }
            
        }
        bufferedReader.close();
        inputStreamReader.close();
        fileInputStream.close();
        COUNT=Integer.toString(count);
        return COUNT;
    }
    public String month(String u,int todate,int year,String status) throws FileNotFoundException, IOException{
        String line;
        int count = 0;
        SimpleDateFormat formatter = new SimpleDateFormat("MM"); 
        Date date=new Date();
        String todaydate=formatter.format(date);
        SimpleDateFormat formatter2 = new SimpleDateFormat("yyyy");
        Date date2=new Date();
        String thisyear=formatter2.format(date2);
        File file=new File(u);
        FileInputStream fileInputStream=new FileInputStream(file);
        InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream);
        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
        while ((line = bufferedReader.readLine()) != null) {
            String countme[]=line.split(",|-");
            if (countme[todate].equals(todaydate)&&countme[year].equals(thisyear)){
                if(countme[25].equals(status))
                count++;
            }
            
        }
        bufferedReader.close();
        inputStreamReader.close();
        fileInputStream.close();
        COUNT=Integer.toString(count);
        return COUNT;
    }
    public String year(String u,int year) throws FileNotFoundException, IOException{
        String line;
        int count = 0;
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy"); 
        Date date=new Date();
        String todaydate=formatter.format(date);
        File file=new File(u);
        FileInputStream fileInputStream=new FileInputStream(file);
        InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream);
        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
        while ((line = bufferedReader.readLine()) != null) {
            String countme[]=line.split(",|-");
            if (countme[year].equals(todaydate)){
                count++;
            }
            
        }
        bufferedReader.close();
        inputStreamReader.close();
        fileInputStream.close();
        COUNT=Integer.toString(count);
        return COUNT;
    }
     public String year(String u,int year,String status) throws FileNotFoundException, IOException{
        String line;
        int count = 0;
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy"); 
        Date date=new Date();
        String todaydate=formatter.format(date);
        File file=new File(u);
        FileInputStream fileInputStream=new FileInputStream(file);
        InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream);
        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
        while ((line = bufferedReader.readLine()) != null) {
            String countme[]=line.split(",|-");
            if (countme[year].equals(todaydate)){
                if(countme[25].equals("delivered"))
                count++;
            }
            
        }
        bufferedReader.close();
        inputStreamReader.close();
        fileInputStream.close();
        COUNT=Integer.toString(count);
        return COUNT;
    }
    public void setTableValues(String format, String filetoread, int value, viewUser object) throws FileNotFoundException, IOException{
        
        object.setVisible(true);
        object.removerow();
        object.jToggleButton2.setVisible(false);
        object.jToggleButton1.setVisible(false);
        object.back.setVisible(false);
        object.close.setVisible(true);
        SimpleDateFormat formatter = new SimpleDateFormat(format);
        Date date=new Date();
        String todaydate=formatter.format(date);
        SimpleDateFormat formatter1 = new SimpleDateFormat("MM");
        Date date1=new Date();
        String thismonth=formatter1.format(date1);
        SimpleDateFormat formatter2 = new SimpleDateFormat("yyyy");
        Date date2=new Date();
        String thisyear=formatter2.format(date2);
        FileReader fr = new FileReader(filetoread);
        
        BufferedReader br = new BufferedReader(fr);
        DefaultTableModel model = (DefaultTableModel)object.detailstable.getModel();
        Object[] lines = br.lines().toArray();
        for(int i = 0; i < lines.length; i++){
                String[] row = lines[i].toString().split("-|,");
                if(format.equals("yyyy")&&row[value].equals(todaydate)){
                    model.addRow(row);
                }
                else if(row[value].equals(todaydate)&&row[17].equals(thismonth)&&row[18].equals(thisyear)){
                    model.addRow(row);}
            }
        br.close();
        fr.close();
   }
    public void setTableValues(String format, String filetoread,int value,allFeedbacks object) throws FileNotFoundException, IOException{
        object.setVisible(true);
        object.removerow();
        object.spec.enter.setVisible(false);
        object.back.setVisible(false);
        object.back1.setVisible(true);
        SimpleDateFormat formatter = new SimpleDateFormat(format);
        Date date=new Date();
        String todaydate=formatter.format(date);//dd
        SimpleDateFormat formatter1 = new SimpleDateFormat("MM");
        Date date1=new Date();
        String thismonth=formatter1.format(date1);
        SimpleDateFormat formatter2 = new SimpleDateFormat("yyyy");
        Date date2=new Date();
        String thisyear=formatter2.format(date2);
        FileReader fr = new FileReader(filetoread);
        BufferedReader br = new BufferedReader(fr);
        DefaultTableModel model = (DefaultTableModel)object.feedbacktable.getModel();
        Object[] lines = br.lines().toArray();
        for(int i = 0; i < lines.length; i++){
                String[] row = lines[i].toString().split("-|,");
                if(format.equals("yyyy")&&row[value].equals(todaydate)){
                    model.addRow(row);
                }
                else if(row[value].equals(todaydate)&&row[8].equals(thisyear)&&row[7].equals(thismonth)){
                    model.addRow(row);}
            }
               
        br.close();
        fr.close();
   }
    public void setTableValues(String format, String filetoread,int value,tableForOrders object) throws FileNotFoundException, IOException{
        object.setVisible(true);  
        removerow();
        SimpleDateFormat formatter = new SimpleDateFormat(format);
        Date date=new Date();
        String todaydate=formatter.format(date);//dd
        SimpleDateFormat formatter1 = new SimpleDateFormat("MM");
        Date date1=new Date();
        String thismonth=formatter1.format(date1);
        SimpleDateFormat formatter2 = new SimpleDateFormat("yyyy");
        Date date2=new Date();
        String thisyear=formatter2.format(date2);
        FileReader fr = new FileReader(filetoread);
        BufferedReader br = new BufferedReader(fr);
        DefaultTableModel model = (DefaultTableModel)object.allordetable.getModel();
        Object[] lines = br.lines().toArray();
        for(int i = 0; i < lines.length; i++){
                String[] row = lines[i].toString().split("-|,");
                if(format.equals("yyyy")&&row[value].equals(todaydate)){
                    model.addRow(row);
                }
                else if(row[value].equals(todaydate)&&row[2].equals(thismonth)&&row[1].equals(thisyear)){
                    model.addRow(row);}
            }
        br.close();
        fr.close();
   }
    public void setTableValues(String format, String filetoread,int value,tableForOrders object,String status) throws FileNotFoundException, IOException{
        object.setVisible(true); 
        removerow();
        SimpleDateFormat formatter = new SimpleDateFormat(format);
        Date date=new Date();
        String todaydate=formatter.format(date);//dd
        SimpleDateFormat formatter1 = new SimpleDateFormat("MM");
        Date date1=new Date();
        String thismonth=formatter1.format(date1);
        SimpleDateFormat formatter2 = new SimpleDateFormat("yyyy");
        Date date2=new Date();
        String thisyear=formatter2.format(date2);
        FileReader fr = new FileReader(filetoread);
        BufferedReader br = new BufferedReader(fr);
        DefaultTableModel model = (DefaultTableModel)object.allordetable.getModel();
        Object[] lines = br.lines().toArray();
        for(int i = 0; i < lines.length; i++){
                String[] row = lines[i].toString().split("-|,");
                if(format.equals("yyyy")&&row[value].equals(todaydate)){
                    if(row[25].equals(status)){
                    model.addRow(row);}
                }
                else if(row[value].equals(todaydate)&&row[2].equals(thismonth)&&row[1].equals(thisyear)){
                   if(row[25].equals(status)){
                    model.addRow(row);}}
            }
        br.close();
        fr.close();
   }
     public void removerow(){
         DefaultTableModel tbl=(DefaultTableModel)table2.allordetable.getModel();
        int torem=table2.allordetable.getRowCount();
        for (int i=torem-1;i>=0;i--){
            tbl.removeRow(i);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new report().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancel;
    public javax.swing.JTextField deleted;
    private javax.swing.JButton deleteduserbuttons;
    public javax.swing.JTextField delivered;
    private javax.swing.JButton deliverybuttons;
    public javax.swing.JTextField deliverycount;
    public javax.swing.JTextField feedbacks;
    private javax.swing.JButton feedbacksbutton;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    public javax.swing.JTextField managercount;
    private javax.swing.JButton managersbutton;
    private javax.swing.JToggleButton monthbutton;
    private javax.swing.JButton orders;
    private javax.swing.JToggleButton todaybutton;
    private javax.swing.JToggleButton totalbutton;
    private javax.swing.JButton totaldelivered;
    public javax.swing.JTextField totalorders;
    public javax.swing.JTextField userdelete;
    private javax.swing.JToggleButton yearbutton;
    // End of variables declaration//GEN-END:variables

    
}
